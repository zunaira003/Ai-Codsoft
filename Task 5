Develop an AI application that can detect and recognize faces in images or videos. Use pre-trained face detection models like Haar cascades or deep learning-based face detectors, and optionally add face recognition capabilities using techniques like Siamese networks or ArcFace.


from google.colab import drive

drive.mount('/content/drive/')


pip install opencv-python

pip install matplotlib

import dlib
import cv2
import matplotlib.pyplot as plt

def detect_faces_and_display(image_path):
    # Load the face detection model from Dlib
    face_detector = dlib.get_frontal_face_detector()

    # Load the image
    image = cv2.imread(image_path)

    if image is None:
        print("Error: Could not load the image.")
        return

    # Convert the image to grayscale for face detection
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale image
    faces = face_detector(gray)

    # Draw rectangles around the detected faces
    for rect in faces:
        x, y, w, h = rect.left(), rect.top(), rect.width(), rect.height()
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Display the image with detected faces using Matplotlib
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title('Detected Faces')
    plt.axis('off')
    plt.show()

if __name__ == '__main__':
    image_path = '/content/drive/MyDrive/images/maksssksksss206.png'  # Replace with your image path
    detect_faces_and_display(image_path)

import dlib
import cv2
import matplotlib.pyplot as plt

def detect_faces_and_display(image_path):
    # Load the face detection model from Dlib
    face_detector = dlib.get_frontal_face_detector()

    # Load the image
    image = cv2.imread(image_path)

    if image is None:
        print("Error: Could not load the image.")
        return

    # Convert the image to grayscale for face detection
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale image
    faces = face_detector(gray)

    # Draw rectangles around the detected faces
    for rect in faces:
        x, y, w, h = rect.left(), rect.top(), rect.width(), rect.height()
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Display the image with detected faces using Matplotlib
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title('Detected Faces')
    plt.axis('off')
    plt.show()

if __name__ == '__main__':
    image_path = '00000213.jpg'  # Replace with your image path
    detect_faces_and_display(image_path)


from google.colab import files

# Upload an image from your local machine
uploaded = files.upload()

# List the uploaded files
for filename in uploaded.keys():
    print(f'Uploaded file: {filename}')


import dlib
import cv2
import matplotlib.pyplot as plt

def detect_faces_and_display(image_path):
    # Load the face detection model from Dlib
    face_detector = dlib.get_frontal_face_detector()

    # Load the image
    image = cv2.imread(image_path)

    if image is None:
        print("Error: Could not load the image.")
        return

    # Convert the image to grayscale for face detection
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale image
    faces = face_detector(gray)

    # Draw rectangles around the detected faces
    for rect in faces:
        x, y, w, h = rect.left(), rect.top(), rect.width(), rect.height()
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Display the image with detected faces using Matplotlib
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title('Detected Faces')
    plt.axis('off')
    plt.show()

if __name__ == '__main__':
    image_path = '00000168.jpg'  # Replace with your image path
    detect_faces_and_display(image_path)

