Implement an AI agent that plays the classic game of Tic-Tac-Toe against a human player. You can use algorithms like Minimax with or without Alpha-Beta Pruning to make the AI player unbeatable.
This project will help you understand game theory and basic search algorithms.



import random

# Tic-Tac-Toe board
board = [' ' for _ in range(9)]

# Display the Tic-Tac-Toe board
def print_board(board):
    for row in [board[i:i+3] for i in range(0, 9, 3)]:
        print(' | '.join(row))
        print('---------')

# Check if the board is full
def is_full(board):
    return ' ' not in board

# Check if a player has won
def check_win(board, player):
    for combo in [(0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6), (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)]:
        if all(board[i] == player for i in combo):
            return True
    return False

# Get available moves
def get_available_moves(board):
    return [i for i, spot in enumerate(board) if spot == ' ']

# Minimax with Alpha-Beta Pruning
def minimax(board, depth, maximizing_player):
    if check_win(board, 'O'):
        return -1
    if check_win(board, 'X'):
        return 1
    if is_full(board):
        return 0

    if maximizing_player:
        max_eval = float('-inf')
        for move in get_available_moves(board):
            board[move] = 'X'
            eval = minimax(board, depth - 1, False)
            board[move] = ' '
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for move in get_available_moves(board):
            board[move] = 'O'
            eval = minimax(board, depth - 1, True)
            board[move] = ' '
            min_eval = min(min_eval, eval)
        return min_eval

# AI's move
def ai_move():
    best_move = -1
    best_eval = float('-inf')
    for move in get_available_moves(board):
        board[move] = 'X'
        eval = minimax(board, 0, False)
        board[move] = ' '
        if eval > best_eval:
            best_eval = eval
            best_move = move
    return best_move

# Main game loop
while True:
    print_board(board)
    player_move = int(input("Enter your move (0-8): "))
    
    if board[player_move] == ' ':
        board[player_move] = 'O'
        if check_win(board, 'O'):
            print_board(board)
            print("You win!")
            break
        if is_full(board):
            print_board(board)
            print("It's a tie!")
            break

        ai = ai_move()
        board[ai] = 'X'
        if check_win(board, 'X'):
            print_board(board)
            print("AI wins!")
            break
        if is_full(board):
            print_board(board)
            print("It's a tie!")
            break

